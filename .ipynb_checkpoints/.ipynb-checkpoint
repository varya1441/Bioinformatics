{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "def vyravnivanie(s1, s2):\n",
    "    len_s1 = len(s1)+1\n",
    "    len_s2 = len(s2)+1\n",
    "    d = np.zeros( (len_s1, len_s2)) \n",
    "    d[0][0] = 0\n",
    "    for i_a in range(1,len_s1):\n",
    "        d[i_a][0]=i_a\n",
    "    for i_b in range(1,len_s2):\n",
    "        d[0][i_b]=i_b\n",
    "    for i_a in range(1,len_s1):\n",
    "        for i_b in range(1,len_s2):    \n",
    "            d[i_a][i_b]=min(d[i_a-1][i_b]+1, d[i_a][i_b-1]+1, d[i_a-1][i_b-1]+ (1 if s1[i_a-1]!=s2[i_b-1]else 0) )\n",
    "    print(d)\n",
    "    print(\"Wage is {}\".format(d[len_s1-1][len_s2-1]))\n",
    "    len_s1=len_s1-1\n",
    "    len_s2=len_s2-1\n",
    "    \n",
    "    res1=\"\"\n",
    "    res2=\"\"\n",
    "    while len_s1!=0 or len_s2!=0:\n",
    "        if (d[len_s1-1][len_s2-1]<=min(d[len_s1-1][len_s2],d[len_s1][len_s2-1])):\n",
    "            res1=s1[len_s1-1]+res1\n",
    "            res2=s2[len_s2-1]+res2\n",
    "            len_s1=len_s1-1\n",
    "            len_s2=len_s2-1\n",
    "        elif (d[len_s1-1][len_s2] <=min(d[len_s1-1][len_s2-1],d[len_s1][len_s2-1])):\n",
    "            res1=s1[len_s1-1]+res1\n",
    "            res2=\"-\"+res2\n",
    "            len_s1=len_s1-1\n",
    "        else:\n",
    "            res1=\"-\"+res1\n",
    "            res2=s2[len_s2-1]+res2\n",
    "            len_s2=len_s2-1\n",
    "    print(res1+\"\\n\"+res2)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0. 1. 2. 3. 4. 5. 6. 7. 8.]\n",
      " [1. 0. 1. 2. 3. 4. 5. 6. 7.]\n",
      " [2. 1. 0. 1. 2. 3. 4. 5. 6.]\n",
      " [3. 2. 1. 0. 1. 2. 3. 4. 5.]\n",
      " [4. 3. 2. 1. 1. 1. 2. 3. 4.]\n",
      " [5. 4. 3. 2. 1. 2. 1. 2. 3.]\n",
      " [6. 5. 4. 3. 2. 2. 2. 2. 3.]\n",
      " [7. 6. 5. 4. 3. 3. 3. 3. 2.]\n",
      " [8. 7. 6. 5. 4. 4. 4. 4. 3.]]\n",
      "Wage is 3.0\n",
      "CCA-AGGCT\n",
      "CCAGAGAC-\n"
     ]
    }
   ],
   "source": [
    "vyravnivanie(s1 = \"CCAAGGCT\",s2 = \"CCAGAGAC\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0. 1. 2. 3. 4. 5. 6. 7. 8.]\n",
      " [1. 0. 1. 2. 3. 4. 5. 6. 7.]\n",
      " [2. 1. 0. 1. 2. 3. 4. 5. 6.]\n",
      " [3. 2. 1. 0. 1. 2. 3. 4. 5.]\n",
      " [4. 3. 2. 1. 0. 1. 2. 3. 4.]\n",
      " [5. 4. 3. 2. 1. 0. 1. 2. 3.]\n",
      " [6. 5. 4. 3. 2. 1. 0. 1. 2.]\n",
      " [7. 6. 5. 4. 3. 2. 1. 0. 1.]\n",
      " [8. 7. 6. 5. 4. 3. 2. 1. 0.]]\n",
      "Wage is 0.0\n",
      "CCAAGGCT\n",
      "CCAAGGCT\n"
     ]
    }
   ],
   "source": [
    "vyravnivanie(s1 = \"CCAAGGCT\",s2 = \"CCAAGGCT\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0. 1. 2. 3. 4. 5. 6. 7. 8.]\n",
      " [1. 0. 1. 2. 3. 4. 5. 6. 7.]\n",
      " [2. 1. 0. 1. 2. 3. 4. 5. 6.]\n",
      " [3. 2. 1. 0. 1. 2. 3. 4. 5.]\n",
      " [4. 3. 2. 1. 0. 1. 2. 3. 4.]\n",
      " [5. 4. 3. 2. 1. 0. 1. 2. 3.]\n",
      " [6. 5. 4. 3. 2. 1. 1. 2. 3.]\n",
      " [7. 6. 5. 4. 3. 2. 2. 2. 3.]\n",
      " [8. 7. 6. 5. 4. 3. 3. 3. 3.]]\n",
      "Wage is 3.0\n",
      "CCAAGTTT\n",
      "CCAAGGCC\n"
     ]
    }
   ],
   "source": [
    "vyravnivanie(s1 = \"CCAAGTTT\",s2 = \"CCAAGGCC\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
